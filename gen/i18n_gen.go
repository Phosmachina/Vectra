// Code generated by Vectra ; DO NOT EDIT.

package i18n

type (
	i18nFunc func(...interface{}) string

	errorType struct {
		InvalidDataStructure    i18nFunc
		InsufficientRoleLevel   i18nFunc
		InvalidToken            i18nFunc
		Unauthorised            i18nFunc
		InvalidRequestStructure i18nFunc
		NotFirstLaunch          i18nFunc
		UserExist               i18nFunc
		UserDisabled            i18nFunc
		InvalidUserRef          i18nFunc
	}

	viewType struct {
		Index indexType
		Mixin mixinType
	}

	mixinType struct {
		InputEmail_label i18nFunc
	}

	indexType struct {
		Day_singular i18nFunc
		Day_plural   i18nFunc
	}
)

var (
	Error = errorType{
		InvalidDataStructure: func(args ...interface{}) string {
			return call("error.InvalidDataStructure", args)
		},
		InsufficientRoleLevel: func(args ...interface{}) string {
			return call("error.InsufficientRoleLevel", args)
		},
		InvalidToken: func(args ...interface{}) string {
			return call("error.InvalidToken", args)
		},
		Unauthorised: func(args ...interface{}) string {
			return call("error.Unauthorised", args)
		},
		InvalidRequestStructure: func(args ...interface{}) string {
			return call("error.InvalidRequestStructure", args)
		},
		NotFirstLaunch: func(args ...interface{}) string {
			return call("error.NotFirstLaunch", args)
		},
		UserExist: func(args ...interface{}) string {
			return call("error.UserExist", args)
		},
		UserDisabled: func(args ...interface{}) string {
			return call("error.UserDisabled", args)
		},
		InvalidUserRef: func(args ...interface{}) string {
			return call("error.InvalidUserRef", args)
		},
	}
	View = viewType{
		Index: Index,
		Mixin: Mixin,
	}
	Mixin = mixinType{
		InputEmail_label: func(args ...interface{}) string {
			return call("view.mixin.inputEmail_label", args)
		},
	}
	Index = indexType{
		Day_singular: func(args ...interface{}) string {
			return call("view.index.day_singular", args)
		},
		Day_plural: func(args ...interface{}) string {
			return call("view.index.day_plural", args)
		},
	}
)

func call(key string, args ...interface{}) string {
	return GetInstance().Get(key, args)
}
