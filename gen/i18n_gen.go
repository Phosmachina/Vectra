// Code generated by Vectra; DO NOT EDIT.

package i18n

type (
	i18nFunc func(...interface{}) string

	errorType struct {
		InvalidToken            i18nFunc
		InsufficientRoleLevel   i18nFunc
		NotFirstLaunch          i18nFunc
		UserExist               i18nFunc
		InvalidUserRef          i18nFunc
		Unauthorised            i18nFunc
		InvalidDataStructure    i18nFunc
		UserDisabled            i18nFunc
		InvalidRequestStructure i18nFunc
	}

	viewType struct {
		Mixin mixinType
		Index indexType
	}

	mixinType struct {
		Advice adviceType
		Label  labelType
	}

	labelType struct {
		InputRequestPassword i18nFunc
		InputEmail           i18nFunc
		InputRepeatPassword  i18nFunc
		InputLastname        i18nFunc
		InputToken           i18nFunc
		InputNewPassword     i18nFunc
		InputFirstname       i18nFunc
	}

	adviceType struct {
		AtLeastLower       i18nFunc
		AtLeastSpecialChar i18nFunc
		ValidateEmail      i18nFunc
		NotEmpty           i18nFunc
		AtLeastUpper       i18nFunc
		SameAsPrevious     i18nFunc
		ValidateInitToken  i18nFunc
		AtLeast8Char       i18nFunc
		AtLeastNumber      i18nFunc
	}

	indexType struct {
		Day_singular i18nFunc
		Hello        i18nFunc
		Day_plural   i18nFunc
	}
)

var (
	Error = errorType{
		InvalidToken: func(args ...interface{}) string {
			return call("error.InvalidToken", args...)
		},
		InsufficientRoleLevel: func(args ...interface{}) string {
			return call("error.InsufficientRoleLevel", args...)
		},
		NotFirstLaunch: func(args ...interface{}) string {
			return call("error.NotFirstLaunch", args...)
		},
		UserExist: func(args ...interface{}) string {
			return call("error.UserExist", args...)
		},
		InvalidUserRef: func(args ...interface{}) string {
			return call("error.InvalidUserRef", args...)
		},
		Unauthorised: func(args ...interface{}) string {
			return call("error.Unauthorised", args...)
		},
		InvalidDataStructure: func(args ...interface{}) string {
			return call("error.InvalidDataStructure", args...)
		},
		UserDisabled: func(args ...interface{}) string {
			return call("error.UserDisabled", args...)
		},
		InvalidRequestStructure: func(args ...interface{}) string {
			return call("error.InvalidRequestStructure", args...)
		},
	}

	View = viewType{
		Mixin: Mixin,
		Index: Index,
	}

	Mixin = mixinType{
		Advice: Advice,
		Label:  Label,
	}

	Label = labelType{
		InputRequestPassword: func(args ...interface{}) string {
			return call("view.mixin.label.InputRequestPassword", args...)
		},
		InputEmail: func(args ...interface{}) string {
			return call("view.mixin.label.InputEmail", args...)
		},
		InputRepeatPassword: func(args ...interface{}) string {
			return call("view.mixin.label.InputRepeatPassword", args...)
		},
		InputLastname: func(args ...interface{}) string {
			return call("view.mixin.label.InputLastname", args...)
		},
		InputToken: func(args ...interface{}) string {
			return call("view.mixin.label.InputToken", args...)
		},
		InputNewPassword: func(args ...interface{}) string {
			return call("view.mixin.label.InputNewPassword", args...)
		},
		InputFirstname: func(args ...interface{}) string {
			return call("view.mixin.label.InputFirstname", args...)
		},
	}

	Advice = adviceType{
		AtLeastLower: func(args ...interface{}) string {
			return call("view.mixin.advice.AtLeastLower", args...)
		},
		AtLeastSpecialChar: func(args ...interface{}) string {
			return call("view.mixin.advice.AtLeastSpecialChar", args...)
		},
		ValidateEmail: func(args ...interface{}) string {
			return call("view.mixin.advice.ValidateEmail", args...)
		},
		NotEmpty: func(args ...interface{}) string {
			return call("view.mixin.advice.NotEmpty", args...)
		},
		AtLeastUpper: func(args ...interface{}) string {
			return call("view.mixin.advice.AtLeastUpper", args...)
		},
		SameAsPrevious: func(args ...interface{}) string {
			return call("view.mixin.advice.SameAsPrevious", args...)
		},
		ValidateInitToken: func(args ...interface{}) string {
			return call("view.mixin.advice.ValidateInitToken", args...)
		},
		AtLeast8Char: func(args ...interface{}) string {
			return call("view.mixin.advice.AtLeast8Char", args...)
		},
		AtLeastNumber: func(args ...interface{}) string {
			return call("view.mixin.advice.AtLeastNumber", args...)
		},
	}

	Index = indexType{
		Day_singular: func(args ...interface{}) string {
			return call("view.index.day_singular", args...)
		},
		Hello: func(args ...interface{}) string {
			return call("view.index.hello", args...)
		},
		Day_plural: func(args ...interface{}) string {
			return call("view.index.day_plural", args...)
		},
	}
)

func call(key string, args ...interface{}) string {
	return GetInstance().Get(key, args...)
}
