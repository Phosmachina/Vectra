package view

import (
	. "Vectra/src/model/service"
	. "Vectra/src/model/storage"
	. "github.com/Phosmachina/FluentKV/reldb"
)

{{ with .ViewTypes }}

	{{- $bodies := .Bodies -}}

	{{- range .Types }}
type {{ .Name }} struct {
{{- range .Attributes }}
	{{ .Name }} {{ .Type }}
{{- end }}
}
	{{ end -}}

	{{ range .Constructors }}

func {{ .Name }} (
{{- range .Attributes }} {{- .Name }} {{ .Type }}, {{ end -}}
) {{ .Name | TrimNewPrefix }} {
{{- if KeyExist .Name $bodies }}
{{ index $bodies .Name -}}
{{ else }}
	{{- if eq "NewGlobalCtx" .Name }}
	config := GetApiV1().GetStore().Config

	ctx := GlobalCtx{
		IsDev:    config.IsDev,
		TabTitle: config.TabPrefix + tabSuffix,
		User:     newUserCtx(userId),
		Lang:     config.DefaultLang,
		Langs:     config.Langs,
	}

	if ctx.IsDev {
		ctx.Domain = config.DevDomain
	} else {
		ctx.Domain = config.Domain
	}

	return ctx
{{ else if eq "newUserCtx" .Name }}
	if userId == "" {
		return UserCtx{}
	}

	db := *GetApiV1().GetStore().DB
	userWrp := Get[User](db, userId)
	user := userWrp.Value
	role := AllFromLink[User, Role](db, userId)[0].Value

	return UserCtx{
		ID:          userId,
		Role:        role,
		IsActivated: user.IsActivated,
		Firstname:   user.Firstname,
		Lastname:    user.Lastname,
		Email:       user.Email,
	}
{{ end -}}
{{ end -}}
}

	{{- end -}}


{{ end }}
