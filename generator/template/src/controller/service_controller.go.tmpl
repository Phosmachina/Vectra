package controller

import (
. "Vectra/src/model/service"
. "Vectra/src/model/storage"
"github.com/gofiber/fiber/v2"
"github.com/gofiber/fiber/v2/middleware/session"
. "github.com/Phosmachina/FluentKV/reldb"
)

type {{ .Name }}Controller struct {
Controller
}

func New{{ .Name }}Controller(r fiber.Router, store *session.Store) {
controller := {{ .Name }}Controller{NewController(r, store)}

{{ range .Routes }}
    r.{{ .Kind }}("{{ .Path }}", controller.{{ .Target }})
{{- end }}
}

{{ $bodies := .Bodies -}}
{{- $name := .Name -}}

{{ range .Routes }}
func (c {{ $name }}Controller) {{ .Target }}(ctx *fiber.Ctx) error {
{{- if KeyExist .Target $bodies }}
    {{ index $bodies .Target -}}
{{ else if eq "activateAdmin" .Target }}
    return HandleRequest(
    ctx,
    func(t ActivateAdminExch) (error,
    *ObjWrapper[IObject]) {
    return GetApiV1().ActivateAdmin(t), nil
    },
    nil,
    )
{{ else if eq "login" .Target }}
    sess, err := c.store.Get(ctx)
    if err != nil {
    return fiber.ErrInternalServerError
    }

    return HandleRequest(
    ctx,
    func(t ConnectExch) (error, *ObjWrapper[User]) {
    return GetApiV1().Connect(t, sess.ID(),
    ctx.GetRespHeader("User-Agent"))
    },
    func(userWrp *ObjWrapper[User]) {
    sess.Set(SessionKeyForUserId, userWrp.ID)
    sess.Save()
    },
    )
{{ else if eq "updateLang" .Target }}
    return HandleRequest(
    ctx,
    func(t LangExch) (error, *ObjWrapper[IObject]) {
    GetApiV1().GetStore().Config.CurrentLang = t.Lang
    return nil, nil
    },
    nil,
    )
{{ else }}
    return nil
{{ end -}}
}

{{ end }}
