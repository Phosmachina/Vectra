package service

import (
	"errors"
)

var instance *ApiV1

var (
	ErrorNotFirstLaunch = errors.New("ErrorNotFirstLaunch")
	ErrorInvalidToken   = errors.New("ErrorInvalidToken")
	ErrorUnauthorised   = errors.New("ErrorUnauthorised")
	ErrorUserExist      = errors.New("ErrorUserExist")
	ErrorUserDisabled   = errors.New("ErrorUserDisabled")
	ErrorInvalidUserRef = errors.New("ErrorInvalidUserRef")
)

type ApiV1 struct {
	service
}

func newApiV1() *ApiV1 {
	a := &ApiV1{}
	a.service = *newService()

	return a
}

func GetApiV1() *ApiV1 {

	if instance == nil {
		lock.Lock()
		defer lock.Unlock()
		if instance == nil {
			instance = newApiV1()
		}
	}

	return instance
}

// region Exchange type declaration

type ConnectExch struct {
	Email    string `mod:"trim" validate:"required" json:"email"`
	Password string `           validate:"required" json:"password"`
}

type ConnectAdminExch struct {
	Password string `validate:"required" json:"password"`
}

type ActivateAdminExch struct {
	Password string `                 validate:"required"       json:"password"`
	Email    string `mod:"trim,lcase" validate:"required,email" json:"email"`
	Token    string `                 validate:"required"       json:"token"`
}

type UserExch struct {
	ID        string `                                           json:"id"`
	Password  string `                 validate:"required"       json:"password"`
	Firstname string `mod:"trim,camel" validate:"required"       json:"firstname"`
	Lastname  string `mod:"trim,camel" validate:"required"       json:"lastname"`
	Email     string `mod:"trim,lcase" validate:"required,email" json:"email"`
}

type ReasonExch struct {
	Reason string `json:"reason"`
}

// TEMPLATE: declare your struct for AJAX here

// endregion
